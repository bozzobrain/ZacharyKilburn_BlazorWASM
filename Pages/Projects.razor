@page "/projects/{projecttitle?}"
@inject IMessageService MessageService
@inject ProjectLoader _projects
@inject NavigationManager _nav

@if (selectedProject == null)
{
	<div class="top-row"></div>
	<div class="px-4">
		<h3>Projects</h3>
		<div class="grid-container">
			@{

				int index = 0;
				foreach (var p in _projects.projects)
				{
					<div class="grid-item" @onclick="(()=>SelectProject(p.ProjectHref))">
						<img src="@p.ProjectMainImage" style="width: 250px;">
						<br />
						<br />
						<h5 style="align-items:center; ">@p.ProjectTitle</h5>
					</div>
					index++;
				}
				@while (index % 3 != 0)
				{
					index++;
					<div class="grid-item"> Coming Soon	</div>
				}
			}
		</div>
	</div>
}
else if (selectedProject != null)
{
	<div class="top-row">
		@if (currentViewMode == ViewMode.Main)
		{
			<button class="mode-btn active" @onclick="(()=>currentViewMode=ViewMode.Main)">Overview</button>
			@if (selectedProject.ThreeDeeModel != string.Empty)
			{
				<button class="mode-btn" @onclick="(()=>currentViewMode=ViewMode.ThreeDModel)">3D Model</button>
			}

	}
		else if (currentViewMode == ViewMode.ThreeDModel)
		{
			<button class="mode-btn" @onclick="(()=>currentViewMode=ViewMode.Main)">Overview</button>
			@if (selectedProject.ThreeDeeModel != string.Empty)
			{
				<button class="mode-btn active" @onclick="(()=>currentViewMode=ViewMode.ThreeDModel)">3D Model</button>
			}
		}
	</div>
	<div class="px-4">
		@if (currentViewMode == ViewMode.Main)
		{
			<div class="project-container">
				<div class="project-subcontainer">
					<div>
						<h3>@selectedProject.ProjectTitle</h3>
					</div>
					<div class="project-image">
						@if (selectedProject.CollapsedImage != "")
						{
							<img src="@gifAnimation" @onclick="OnClickExplodedView" style="width:100vh;">

						}
						else
						{
							<img src="@selectedProject.ProjectMainImage">
						}
					</div>

				</div>
				<div class="project-description">
					<p>@selectedProject.ProjectDescription</p>
				</div>
			</div>
		}
		else if (currentViewMode == ViewMode.ThreeDModel)
		{
			<div>
				<ZacharyKilburn_BlazorWASM.RazorComponents._3DViewer  objFile=@selectedProject.ThreeDeeModel objTexture=@selectedProject.ThreeDeeModelTexture CameraLook=@selectedProject.CameraLook CameraPosition=@selectedProject.CameraPosition ScaleFactor=@selectedProject.ScaleFactor />
			</div>
		}
	</div>
}

@code {
	[Parameter] public string? projectTitle { get; set; }

	enum ViewMode
	{
		Main,
		ThreeDModel
	}

	private ViewMode currentViewMode = ViewMode.Main;

	private Project? selectedProject;

	private void SelectProject(string pref)
	{
		_nav.NavigateTo(pref);

	}
	string gifAnimation = "";
	bool OnLoadExploded = true;
	bool Exploded = false;

	private void OnClickExplodedView()
	{
		if (selectedProject != null)
			if (OnLoadExploded)
			{
				OnLoadExploded = false;
				gifAnimation = selectedProject.ExplodingImage;
			}
			else
			{
				if (Exploded)
				{
					Exploded = false;
					gifAnimation = selectedProject.CollapsingImage;
				}
				else
				{
					Exploded = true;
					gifAnimation = selectedProject.ExplodingImage;
				}
			}
		StateHasChanged();
	}
	protected override void OnParametersSet()
	{
		if (projectTitle != null)
		{
			currentViewMode = ViewMode.Main;
			selectedProject = _projects.GetProjectByHref(projectTitle);
			if (selectedProject != null && selectedProject.CollapsedImage != "")
				gifAnimation = selectedProject.CollapsedImage;
		}
		else
		{
			selectedProject = null;
		}
		MessageService.SendMessage("projectsload");
		base.OnParametersSet();
	}


	private List<string> messages = new List<string>();
	protected override void OnInitialized()
	{
		// subscribe to OnMessage event
		MessageService.OnMessage += MessageHandler;
	}

	public void Dispose()
	{
		// unsubscribe from OnMessage event
		MessageService.OnMessage -= MessageHandler;
	}

	private void MessageHandler(string message)
	{

	}
}
