@page "/projects/{projecttitle?}"
@inject IMessageService MessageService
@inject ProjectLoader _projects
@inject NavigationManager _nav
@using System.Text.RegularExpressions;
@using System.Web
<style>
	.pdf-embed {
		overflow: hidden !important;
		height: calc(100vh - 7rem);
		width: 100%;
		padding-bottom: 47%;
		position: relative;
		margin: auto;
	}

		.pdf-embed embed,
		.pdf-embed iframe,
		.pdf-embed object {
			height: 100%;
			position: absolute;
			margin: auto;
			width: 100%;
		}</style>

@if (selectedProject == null)
{
	<div class="top-row-body">
		<div class="page-header">
			<h3>Projects</h3>
		</div>
	</div>
	<div class="px-4">
		<div class="grid-container">
			@{

				int index = 0;
				foreach (var p in _projects.projects)
				{
					<a class="grid-item" href="@p.ProjectHref" @onclick="(()=>SelectProject(p.ProjectHref))">
						<img src="@p.ProjectMainImage">
						<br />
						<br />
						<h5 style="align-items:center; ">@p.ProjectTitle</h5>
					</a>
					index++;
				}
				@while (index % 3 != 0)
				{
					index++;
					<div class="grid-item"> Coming Soon	</div>
				}
			}
		</div>
	</div>
}
else if (selectedProject != null)
{
	<div class="top-row-body">
		<div class="project-header">
			<div class="project-title">
				@selectedProject.ProjectTitle
				
			</div>
			<div class="project-date">
				@selectedProject.ProjectDate
			</div>
			<hr />
		</div>
		<div class="project-controls">
			@if (currentViewMode == ViewMode.Main)
			{
				<button class="mode-btn active" @onclick="(()=>SelectPage(ViewMode.Main))">Overview</button>
				@if (selectedProject.ThreeDView != null)
				{
					<button class="mode-btn" @onclick="(()=>SelectPage(ViewMode.ThreeDModel))">3D Model</button>
				}
				foreach (var p in selectedProject.SubPages)
				{
					<button class="mode-btn" @onclick="(()=>SelectPage(p))">@p.SubPageTitle</button>
				}
			}
			else if (currentViewMode == ViewMode.ThreeDModel)
			{
				<button class="mode-btn" @onclick="(()=>SelectPage(ViewMode.Main))">Overview</button>
				@if (selectedProject.ThreeDView != null)
				{
					<button class="mode-btn active" @onclick="(()=>SelectPage(ViewMode.ThreeDModel))">3D Model</button>
				}
				foreach (var p in selectedProject.SubPages)
				{
					<button class="mode-btn" @onclick="(()=>SelectPage(p))">@p.SubPageTitle</button>
				}
			}
			else if (currentViewMode == ViewMode.Subpages)
			{
				<button class="mode-btn" @onclick="(()=>SelectPage(ViewMode.Main))">Overview</button>
				@if (selectedProject.ThreeDView != null)
				{
					<button class="mode-btn" @onclick="(()=>SelectPage(ViewMode.ThreeDModel))">3D Model</button>
				}
				foreach (var p in selectedProject.SubPages)
				{
					if (currentSubPage == p)
					{
						<button class="mode-btn active" @onclick="(()=>SelectPage(p))">@p.SubPageTitle</button>
					}
					else
					{
						<button class="mode-btn" @onclick="(()=>SelectPage(p))">@p.SubPageTitle</button>
					}
				}
			}
			@if (selectedProject.ProjectFacebook != string.Empty)
			{
				<a class="mode-btn button" href="@selectedProject.ProjectFacebook">Facebook</a>
			}
			
		</div>
	</div>
	<div class="px-4">
		@if (currentViewMode == ViewMode.Main)
		{
			<div class="project-container">
				<div class="project-subcontainer">
					<div class="project-image">
						@if (selectedProject.ProjectMainVideoLink == string.Empty)
						{

							<img src="@selectedProject.ProjectMainImage">
						}
						else
						{
							<iframe width="560" height="315" src="@selectedProject.ProjectMainVideoLink" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
							</iframe>
						}

					</div>

				</div>
				<div class="project-description">
					@((MarkupString)Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(HttpUtility.HtmlEncode(selectedProject.ProjectDescription), "\n", "<br/>"), "hstart", "<div style=\"font-family: questrial, sans-serif;font-weight:bold;\">"), "hend", "</div>"), "linkstart", "<a style=\"display:contents;\""), "hrefend", ">"), "linkend", "</a>"), "imgstart", "<img style=\"width=50vw; min-height=50px;\" src="), "imgend", "/>"))

				</div>
				<div class="project-description">
					@if (selectedProject.Link != null)
					{
						<p>Click to view  <a href="@selectedProject.Link.Link">@selectedProject.Link.Name</a></p>
						<br />
					}
				</div>

				@if (selectedProject.DownloadLink != "")
				{
					<div class="project-description">
						<ZacharyKilburn_BlazorWASM.RazorComponents.DownloadItem DownloadHref="@selectedProject.DownloadLink" DownloadText="Download Report"></ZacharyKilburn_BlazorWASM.RazorComponents.DownloadItem>
					</div>
				}
			</div>
		}
		else if (currentViewMode == ViewMode.ThreeDModel)
		{
			<div>
				<ZacharyKilburn_BlazorWASM.RazorComponents._3DViewer threeDView=@selectedProject.ThreeDView />
			</div>
		}
		else if (currentViewMode == ViewMode.Subpages)
		{
			<div class="project-container">
				<div class="project-subcontainer">
					@if (currentSubPage.threeDViews.Count > 0)
					{
						<div>
							<ZacharyKilburn_BlazorWASM.RazorComponents._3DViewer threeDViews=@currentSubPage.threeDViews />
						</div>
					}
					else if (currentSubPage.SubPageImage != "")
					{
						<div class="project-image">

							<img src="@currentSubPage.SubPageImage">

						</div>
					}
					else if (currentSubPage.SubPagePDF != "")
					{

						<div class="pdf-embed pdf-boards-projects">
							<object data="@normalPDF(currentSubPage.SubPagePDF)" type="application/pdf">
							</object>
						</div>
					}
					else if (currentSubPage.ContainedBoardDesigns != null)
					{
						<div class="project-boards">
							<table class=" board-table">
								<tbody>
									@foreach (var b in currentSubPage.ContainedBoardDesigns)
									{
										Board brd = BoardLoader.GetBoardByPN(b);
										if (brd != null)
										{
											<tr>

												<td> <img src="@brd.BoardMainImage" /></td>
												<td> <a class="project-board-list" href="@brd.BoardHref">@brd.BoardTitle</a></td>

											</tr>
										}
									}
								</tbody>
							</table>
						</div>
					}
				</div>
				@if (currentSubPage.SubPageDescription != string.Empty)
				{
					<div class="project-description">
						@((MarkupString)Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(Regex.Replace(HttpUtility.HtmlEncode(currentSubPage.SubPageDescription), "\n", "<br/>"), "hstart", "<div style=\"font-family: questrial, sans-serif;font-weight:bold;\">"), "hend", "</div>"), "linkstart", "<a style=\"display:contents;\""), "hrefend", ">"), "linkend", "</a>"), "imgstart", "<img style=\"width=50vw; min-height=50px;\" src="), "imgend", "/>"))

					</div>
				}


			</div>

		}
	</div>
}

@code {
	[Parameter] public string? projectTitle { get; set; }

	enum ViewMode
	{
		Main,
		ThreeDModel,
		Subpages,
	}

	public ProjectSubPage? currentSubPage = null;

	private ViewMode currentViewMode = ViewMode.Main;

	private Project? selectedProject;

	private void SelectProject(string pref)
	{
		_nav.NavigateTo(pref);

	}

	private string PDFsuffix = @"#toolbar=0&navpanes=0&view=FitWidth";

	//<iframe src="@buildgoogleURL(board.BoardPDF)" style="width:100%; height:650px;" frameborder="0"></iframe>
	private string normalPDF(string pdffile)
	{
		return pdffile + PDFsuffix;
	}
	private void SelectPage(ProjectSubPage page)
	{
		currentViewMode = ViewMode.Subpages;
		currentSubPage = page;

	}
	private void SelectPage(ViewMode v)
	{

		currentViewMode = v;
		currentSubPage = null;
	}

	protected override void OnParametersSet()
	{
		if (projectTitle != null)
		{
			currentViewMode = ViewMode.Main;
			selectedProject = _projects.GetProjectByHref(projectTitle);
		}
		else
		{
			selectedProject = null;
		}
		MessageService.SendMessage("projectsload");
		base.OnParametersSet();
	}


	private List<string> messages = new List<string>();
	protected override void OnInitialized()
	{
		// subscribe to OnMessage event
		MessageService.OnMessage += MessageHandler;
	}

	public void Dispose()
	{
		// unsubscribe from OnMessage event
		MessageService.OnMessage -= MessageHandler;
	}

	private void MessageHandler(string message)
	{

	}
}
