@inject NavigationManager _nav
@inject IMessageService MessageService
@inject ProjectLoader _projects
@inject BoardLoader _boards
<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">Zachary Kilburn</a>
		<button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
			<span class="navbar-toggler-icon"></span>
		</button>
	</div>
</div>

<div class="@NavMenuCssClass" >
	<nav class="flex-column">
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="ToggleNavMenu">
				<span class="oi oi-home" aria-hidden="true"></span> Home
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="projects">
				<span style="padding:15px;"></span> Projects
			</NavLink>
			<CollapsibleButton Collapsible="true" Collapsed="@projectCollapsibleCollapsed" collapsibleClass="project">
				@foreach (var p in _projects.projects)
				{
					<NavLink class="nav-link" href="@p.ProjectHref" @onclick="ToggleNavMenu">
						@p.ProjectTitle
					</NavLink>
				}
			</CollapsibleButton>


		</div><div class="nav-item px-3">
			<NavLink class="nav-link" href="boards">
				<span style="padding:15px;"></span> Boards
			</NavLink>
			<CollapsibleButton Collapsible="true" Collapsed="@boardCollapsibleCollapsed" collapsibleClass="board">
				@foreach (var b in _boards.boards)
				{
					<NavLink class="nav-link" href="@b.BoardHref" @onclick="ToggleNavMenu">
						@b.BoardTitle
					</NavLink>
				}
			</CollapsibleButton>


		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="resume" @onclick="ToggleNavMenu">
				<span class="oi oi-list-rich" aria-hidden="true"></span> Resume
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="aboutme" @onclick="ToggleNavMenu">
				<span class="oi oi-list-rich" aria-hidden="true"></span> About Me
			</NavLink>
		</div>
	</nav>
</div>

@code {
	protected override void OnInitialized()
	{
		// subscribe to OnMessage event
		MessageService.OnMessage += MessageHandler;

		base.OnInitialized();
	}
	private bool collapseNavMenu = true;

	private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}
	bool projectCollapsibleCollapsed = true;
	bool boardCollapsibleCollapsed = true;
	string projectsPageRoot = "projects";
	string boardPageRoot = "board";
	private void NavigateTo(object uri)
	{
		_nav.NavigateTo((string)uri);
	}
	private string BuildProjectLink(string projectHref)
	{
		return projectsPageRoot + "/" + projectHref;
	}
	private List<string> messages = new List<string>();


	public void Dispose()
	{
		// unsubscribe from OnMessage event
		MessageService.OnMessage -= MessageHandler;
	}

	private void MessageHandler(string message)
	{
		if (message.Contains("project"))
		{
			if (_nav.Uri.Contains(projectsPageRoot) && projectCollapsibleCollapsed)
			{
				projectCollapsibleCollapsed = false;
				//StateHasChanged();
			}
			else if (!_nav.Uri.Contains(projectsPageRoot) && !projectCollapsibleCollapsed)
			{
				projectCollapsibleCollapsed = true;
				//StateHasChanged();
			}
			if (!boardCollapsibleCollapsed)
			{
				boardCollapsibleCollapsed = true;
				//StateHasChanged();
			}
		}
		if (message.Contains("board"))
		{
			if (_nav.Uri.Contains(boardPageRoot) && boardCollapsibleCollapsed)
			{
				boardCollapsibleCollapsed = false;
				//StateHasChanged();
			}
			else if (!_nav.Uri.Contains(boardPageRoot) && !boardCollapsibleCollapsed)
			{
				boardCollapsibleCollapsed = true;
				//StateHasChanged();
			}
			if (!projectCollapsibleCollapsed)
			{
				projectCollapsibleCollapsed = true;
				//StateHasChanged();
			}
		}

	}
}
