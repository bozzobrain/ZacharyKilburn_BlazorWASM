@inject IJSRuntime jsRuntime
@inject IMessageService MessageService
<div class="collapsible-button" @onclick="ToggleCollapsibleButton">
	@if (Collapsible)
	{
		<button type="button" class="collapsible-chevron "><span class="oi oi-plus"></span></button>
	}
	else
	{
		<button type="button" class="nav-link sidenav-large-clickable-sub " @onclick="@InvokeParentMethod">@ButtonText</button>
	}
	<NavLink class="nav-item-collapsible nav-link" style="width: 100% !important; padding-left: 1rem; background-color:transparent !important" href="@collapsibleClass">
		@ButtonText
	</NavLink>
</div>
<div class="collapsible-content" style="display:@collapsibleDisplay">
	@ChildContent
</div>
@code {
	[Parameter] public string ButtonText { get; set; }
	[Parameter] public EventCallback<object> ParentMethod { get; set; }
	[Parameter] public object ParentObject { get; set; }
	[Parameter] public RenderFragment ChildContent { get; set; }
	[Parameter] public bool Collapsible { get; set; }
	[Parameter] public bool Collapsed { get; set; }
	[Parameter] public string collapsibleClass { get; set; }

	private string collapsibleDisplay = "none";

	private string clickedClassCollapsible = "";
	protected override void OnParametersSet()
	{
		if (Collapsed && collapsibleDisplay == "block")
		{
			ToggleCollapsibleButton();
		}
		base.OnParametersSet();
	}
	private void ToggleCollapsibleButton()
	{
		if(collapsibleDisplay=="none")
		{
			collapsibleDisplay = "block";
			MessageService.SendMessage(collapsibleClass + "expand");
		}
		else
		{
			collapsibleDisplay = "none";
			MessageService.SendMessage(collapsibleClass + "collapse");
		}
	}
	private void InvokeParentMethod()
	{
		if (clickedClassCollapsible == "")
		{
			clickedClassCollapsible = "active";
		}
		else
		{
			clickedClassCollapsible = "";
		}
		ParentMethod.InvokeAsync(ParentObject);
	}
}